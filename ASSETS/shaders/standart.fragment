#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

in vec4 fragPosLightSpace;

uniform bool use_diffuse;
uniform bool emit;

uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 diffuse_color;

uniform float shine;
uniform float spec_factor;

uniform vec2 uv_scale;

uniform bool color_mode;
uniform vec3 color_color;

uniform sampler2D oText;

vec3 calculateDiffuse(vec3 lightColor, vec2 uv, vec3 norm) {
    vec3 diffuse;

	float diff = max(dot(norm, -vec3(0.9, 0.5, -0.9)), 0.0);
    
    if (use_diffuse) {
        diffuse = diff * texture(oText, vec2(uv.x, 1.0 - uv.y)).rgb * lightColor * diffuse_color;
    } else {
        diffuse = diff * lightColor * diffuse_color;
    }
    
    return diffuse;
}

vec3 calculateSpecular(vec3 lightColor, vec3 norm, vec3 lightDir, vec3 viewDir, vec2 uv) {
    float nDot = dot(norm, lightDir);

    float spec;

    vec3 reflectDir = reflect(lightDir, norm);
    spec = pow(max(dot(viewDir, -reflectDir), 0.0), shine);
	
    vec3 specular = vec3(0.0, 0.0, 0.0);

    if (nDot > 0) {
        specular = spec * lightColor * spec_factor * lightColor * nDot;
    }

    return specular;
}







void main()
{
    if(color_mode == true) {
        FragColor = vec4(color_color, 1.0);
        return;
    }
    vec2 new_TexCoord = uv_scale * TexCoord;

	vec3 norm = Normal;
	
    vec3 result = vec3(0.0, 0.0, 0.0);
    vec3 ambient = lightColor;

    if (use_diffuse) {
        ambient  = ambient * texture(oText, vec2(new_TexCoord.x, 1.0 - new_TexCoord.y)).rgb;
    }


	vec3 viewDir = normalize(viewPos - FragPos);
    result = ambient + result + calculateDiffuse(lightColor, new_TexCoord, norm);


    if (emit) {
        result = vec3(diffuse_color);
    }

	result = texture(oText, vec2(new_TexCoord.x, 1.0 - new_TexCoord.y)).rgb;
    FragColor = vec4(result, 1.0);
	
	
}
